{"version":3,"sources":["api/clients/base.ts","components/app/App.tsx","api/clients/current-weather.ts","api/clients/five-day-forecast.ts","serviceWorker.ts","index.tsx"],"names":["axiosInstance","axios","create","baseURL","timeout","headers","get","url","config","params","process","REACT_APP_OPENWEATHER_KEY","then","response","data","catch","reason","console","log","Promise","reject","App","useState","cityName","setCityName","weather","setWeather","cityNameForecast","setCityNameForecast","forecast","setForecast","useEffect","length","q","a","async","className","type","placeholder","name","value","onChange","e","currentTarget","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAEaA,E,OAA+BC,EAAMC,OAAO,CACvDC,QAAS,0CACTC,QAAS,IACTC,QAAS,CACP,OAAU,mBACV,eAAgB,sBAIPC,EAAM,SACjBC,EACAC,GAKA,OAHIA,IACFA,EAAOC,OAAP,MAAyBC,yDAAYC,2BAEhCX,EACJM,IAAIC,EAAKC,GACTI,MAAK,SAACC,GAAD,OAAgCA,EAASC,QAC9CC,OAAM,SAAAC,GAGL,OAFAC,QAAQC,IAAIF,GAELG,QAAQC,OAAOJ,OC+BbK,EAhDO,WAAO,IAAD,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,OAEIF,mBAAS,IAFb,mBAEnBG,EAFmB,KAEVC,EAFU,OAGsBJ,mBAAS,IAH/B,mBAGnBK,EAHmB,KAGDC,EAHC,OAIMN,mBAAS,IAJf,mBAInBO,EAJmB,KAITC,EAJS,KAoB1B,OAdAC,qBAAU,WCTqB,IAC/BtB,EDSMc,EAASS,OAAS,ICTxBvB,EDUsB,CAAEwB,EAAGV,GCXI,EAAAW,EAAAC,OAAA,yEAEH7B,EAAoB,UAAW,CAAEG,YAF9B,sCDYxBG,KAAKc,KAET,CAACH,IAEJQ,qBAAU,WEhBsB,IAChCtB,EFgBMkB,EAAiBK,OAAS,IEhBhCvB,EFiBuB,CAAEwB,EAAGN,GElBI,EAAAO,EAAAC,OAAA,yEAEH7B,EAAqB,WAAY,CAAEG,YAFhC,sCFmBzBG,KAAKkB,KAET,CAACH,IAGF,yBAAKS,UAAU,OACb,6BACE,+CACA,2BAAOC,KAAK,OACLC,YAAY,OACZC,KAAK,YACLC,MAAOjB,EACPkB,SAAW,SAACC,GAAD,OAAoClB,EAAYkB,EAAEC,cAAcH,UAElF,kDACA,6BAAK,6BAAOI,KAAKC,UAAUpB,EAAS,KAAM,MAE5C,6BACE,kDACA,2BAAOY,KAAK,OACLC,YAAY,OACZC,KAAK,YACLC,MAAOb,EACPc,SAAW,SAACC,GAAD,OAAoCd,EAAoBc,EAAEC,cAAcH,UAE1F,kDACA,6BAAK,6BAAOI,KAAKC,UAAUhB,EAAU,KAAM,QGrC/BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.4144cc3a.chunk.js","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\n\nexport const axiosInstance: AxiosInstance = axios.create({\n  baseURL: 'http://api.openweathermap.org/data/2.5/',\n  timeout: 10000,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const get = <T = any>(\n  url: string,\n  config?: AxiosRequestConfig\n): Promise<T> => {\n  if (config) {\n    config.params['appId'] = process.env.REACT_APP_OPENWEATHER_KEY;\n  }\n  return axiosInstance\n    .get(url, config)\n    .then((response: AxiosResponse<T>) => response.data)\n    .catch(reason => {\n      console.log(reason);\n      //Show error in UI\n      return Promise.reject(reason);\n    });\n};\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport './App.css';\nimport { getCurrentWeather } from '../../api/clients/current-weather';\nimport { CurrentWeather } from '../../api/interfaces/current-weather';\nimport { getFiveDayForecast } from '../../api/clients/five-day-forecast';\nimport { FiveDayForecast } from '../../api/interfaces/five-day-forecast';\n\nconst App: React.FC = () => {\n  const [cityName, setCityName] = useState('');\n  const [weather, setWeather] = useState({} as CurrentWeather);\n  const [cityNameForecast, setCityNameForecast] = useState('');\n  const [forecast, setForecast] = useState({} as FiveDayForecast);\n\n  useEffect(() => {\n    if (cityName.length > 3) {\n      getCurrentWeather({ q: cityName })\n        .then(setWeather);\n    }\n  }, [cityName]);\n\n  useEffect(() => {\n    if (cityNameForecast.length > 3) {\n      getFiveDayForecast({ q: cityNameForecast })\n        .then(setForecast);\n    }\n  }, [cityNameForecast]);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h3>Current weather</h3>\n        <input type=\"text\"\n               placeholder=\"City\"\n               name=\"city-name\"\n               value={cityName}\n               onChange={ (e: FormEvent<HTMLInputElement>) => setCityName(e.currentTarget.value) }\n        />\n        <button>Search weather</button>\n        <div><pre>{ JSON.stringify(weather, null, 2) }</pre></div>\n      </div>\n      <div>\n        <h3>5 day/3 h forecast</h3>\n        <input type=\"text\"\n               placeholder=\"City\"\n               name=\"city-name\"\n               value={cityNameForecast}\n               onChange={ (e: FormEvent<HTMLInputElement>) => setCityNameForecast(e.currentTarget.value)}\n        />\n        <button>Search weather</button>\n        <div><pre>{ JSON.stringify(forecast, null, 2) }</pre></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { CurrentWeather } from '../interfaces/current-weather';\nimport { SearchParameters } from '../interfaces/search-parameters';\nimport { get } from './base';\n\nexport const getCurrentWeather = async (\n  params: SearchParameters\n): Promise<CurrentWeather> => get<CurrentWeather>('weather', { params });\n","import { FiveDayForecast } from '../interfaces/five-day-forecast';\nimport { SearchParameters } from '../interfaces/search-parameters';\nimport { get } from './base';\n\nexport const getFiveDayForecast = async (\n  params: SearchParameters\n): Promise<FiveDayForecast> => get<FiveDayForecast>('forecast', { params });\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}