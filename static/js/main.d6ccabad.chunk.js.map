{"version":3,"sources":["contexts/appContext.tsx","components/header/Header.tsx","api/clients/base.ts","api/parsers/generic.parser.ts","api/parsers/current-weather.parser.ts","api/clients/current-weather.ts","components/weather-parameter-text/WeatherParameterText.tsx","components/current-weather/CurrentWeatherCard.tsx","components/current-weather/CurrentWeatherComponent.tsx","api/parsers/five-day-forecast.parser.ts","api/clients/five-day-forecast.ts","components/forecast/ForecastCard.tsx","components/forecast/FiveDayForecastComponent.tsx","components/home/Home.tsx","styles/theme.ts","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["AppStateContext","React","undefined","AppDispatchContext","appContextReducer","state","action","type","appId","payload","cityName","Error","AppContextProvider","children","process","REACT_APP_OPENWEATHER_KEY","dispatch","Provider","value","useAppState","context","Header","useAppDispatch","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Heading","level","margin","TextInput","placeholder","onChange","e","currentTarget","axiosInstance","axios","create","baseURL","timeout","headers","get","url","config","then","response","data","catch","reason","console","log","Promise","reject","genericParse","apiJson","fieldMap","Object","keys","reduce","result","key","apiValue","inObject","path","pathParts","split","subObject","i","length","elem","hasOwnProperty","findValueByPath","setValueByPath","currentWeatherFieldMap","getCurrentWeather","params","a","WeatherParameterText","props","fill","label","parameterValue","unit","CurrentWeatherCard","currentWeather","weatherParameters","temperature","pressure","humidity","maxTemperature","minTemperature","cloudiness","windSpeed","windDirection","JSON","stringify","CurrentWeatherComponent","useState","weather","setWeather","useEffect","q","fiveDayForecastFieldMap","forecastFieldMap","parseFiveDayForecast","parse","forecasts","map","parseForecast","getFiveDayForecast","ForecastCard","forecast","FiveDayForecastComponent","setForecast","wrap","f","idx","Home","className","theme","global","font","family","size","height","App","Grommet","full","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d6ccabad.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Action = { type: string; payload: string };\ntype Dispatch = (action: Action) => void;\ninterface State {\n  cityName: string;\n  appId: string;\n}\ntype AppProviderProps = { children: React.ReactNode };\n\nconst AppStateContext = React.createContext<State | undefined>(undefined);\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\nconst appContextReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'setAppId': {\n      return { ...state, appId: action.payload };\n    }\n    case 'setCityName': {\n      return { ...state, cityName: action.payload };\n    }\n    default: {\n      throw new Error(`Unhandled action: ${action}`);\n    }\n  }\n};\n\nconst AppContextProvider = ({ children }: AppProviderProps) => {\n  const [state, dispatch] = React.useReducer(appContextReducer, {\n    appId: process.env.REACT_APP_OPENWEATHER_KEY || '',\n    cityName: '',\n  });\n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n};\n\nconst useAppState = () => {\n  const context = React.useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error('useState must be used within a AppContextProvider');\n  }\n  return context;\n};\n\nconst useAppDispatch = () => {\n  const context = React.useContext(AppDispatchContext);\n  if (context === undefined) {\n    throw new Error('useDispatch must be used within a AppContextProvider');\n  }\n  return context;\n};\n\nexport { AppContextProvider, useAppState, useAppDispatch };\n","import React, { FormEvent } from 'react';\nimport { Box, Heading, TextInput } from 'grommet';\nimport { useAppState, useAppDispatch } from '../../contexts/appContext';\nimport './Header.css';\n\nexport const Header: React.FC = () => {\n  const { appId, cityName } = useAppState();\n  const dispatch = useAppDispatch();\n\n  return (\n    <Box\n      tag=\"header\"\n      direction=\"row\"\n      align=\"center\"\n      justify=\"around\"\n      background=\"brand\"\n      pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n      elevation=\"medium\"\n      style={{ zIndex: 1 }}\n    >\n      <Heading level=\"3\" margin=\"none\">\n        Tramuntana\n      </Heading>\n      <TextInput\n        placeholder=\"AppId\"\n        value={appId}\n        onChange={(e: FormEvent<HTMLInputElement>) =>\n          dispatch({ type: 'setAppId', payload: e.currentTarget.value })\n        }\n      />\n      <TextInput\n        placeholder=\"City\"\n        value={cityName}\n        onChange={(e: FormEvent<HTMLInputElement>) =>\n          dispatch({ type: 'setCityName', payload: e.currentTarget.value })\n        }\n      />\n    </Box>\n  );\n};\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\n\nexport const axiosInstance: AxiosInstance = axios.create({\n  baseURL: 'http://api.openweathermap.org/data/2.5/',\n  timeout: 10000,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const get = <T = any>(\n  url: string,\n  config?: AxiosRequestConfig\n): Promise<T> => {\n  return axiosInstance\n    .get(url, config)\n    .then((response: AxiosResponse<T>) => response.data)\n    .catch(reason => {\n      console.log(reason);\n      //Show error in UI\n      return Promise.reject(reason);\n    });\n};\n","const findValueByPath = (inObject: any, path: string): any => {\n  const pathParts = path.split('.');\n  let subObject = inObject;\n  for (let i = 0; i < pathParts.length - 1; i++) {\n    const elem = pathParts[i];\n    if (!subObject || !subObject.hasOwnProperty(elem)) {\n      return undefined;\n    }\n    subObject = subObject[elem];\n  }\n  return subObject[pathParts[pathParts.length - 1]];\n};\n\nconst setValueByPath = (inObject: any, path: string, value: any): any => {\n  let subObject = inObject;\n  const pathParts = path.split('.');\n  for (let i = 0; i < pathParts.length - 1; i++) {\n    const elem = pathParts[i];\n    if (!subObject.hasOwnProperty(elem)) {\n      subObject[elem] = {};\n    }\n    subObject = subObject[elem];\n  }\n\n  subObject[pathParts[pathParts.length - 1]] = value;\n};\n\n/**\n * Maybe we should use Map<string,string> for fieldMap, but it requires tweaking the compiler\n * for ES5 compatibility.\n */\nexport const genericParse = <T = any>(apiJson: any, fieldMap: any): T => {\n  return Object.keys(fieldMap).reduce((result: T, key: string) => {\n    const apiValue = findValueByPath(apiJson, key);\n    if (apiValue) {\n      setValueByPath(result, fieldMap[key], apiValue);\n    }\n    return result;\n  }, {} as T);\n};\n","import { CurrentWeather } from '../interfaces/current-weather';\nimport { genericParse } from './generic.parser';\n\nexport const currentWeatherFieldMap = {\n  'coord.lon': 'coordinates.longitude',\n  'coord.lat': 'coordinates.latitude',\n  'weather': 'weatherConditions',\n  'main.temp': 'weatherParameters.temperature',\n  'main.pressure': 'weatherParameters.pressure',\n  'main.humidity': 'weatherParameters.humidity',\n  'main.temp_min': 'weatherParameters.minTemperature',\n  'main.temp_max': 'weatherParameters.maxTemperature',\n  'main.sea_level': 'weatherParameters.pressureAtSeaLevel',\n  'main.grnd_level': 'weatherParameters.pressureAtGroundLevel',\n  'visibility': 'visibility',\n  'wind.speed': 'weatherParameters.windSpeed',\n  'wind.deg': 'weatherParameters.windDirection',\n  'clouds.all': 'weatherParameters.cloudiness',\n  'rain.1h': 'weatherParameters.rainInLastHour',\n  'rain.3h': 'weatherParameters.rainInLastThreeHours',\n  'snow.1h': 'weatherParameters.snowInLastHour',\n  'snow.3h': 'weatherParameters.snowInLastThreeHours',\n  'name': 'name',\n  'dt': 'time',\n  'timezone': 'timezone',\n  'sys.sunrise': 'sunrise',\n  'sys.sunset': 'sunset',\n  'sys.country': 'country',\n};\n\nexport const parseCurrentWeather = (apiJson: Object): CurrentWeather =>\n  genericParse<CurrentWeather>(apiJson, currentWeatherFieldMap);\n","import { CurrentWeather } from '../interfaces/current-weather';\nimport { SearchParameters } from '../interfaces/search-parameters';\nimport { get } from './base';\nimport { parseCurrentWeather } from '../parsers/current-weather.parser';\n\nexport const getCurrentWeather = async (\n  params: SearchParameters\n): Promise<CurrentWeather> => {\n  const data = await get('weather', { params });\n  return parseCurrentWeather(data);\n};\n","import React from 'react';\nimport { Box, Heading } from 'grommet';\n\ninterface WeatherParameterTextProps {\n  parameterValue: number | string;\n  label: string;\n  unit: string;\n}\n\nconst WeatherParameterText: React.FC<WeatherParameterTextProps> = props => {\n  return (\n    <Box direction=\"row\" align=\"center\" justify=\"evenly\" fill=\"horizontal\">\n      <Heading level=\"6\">{props.label}</Heading>\n      <Heading level=\"5\">{props.parameterValue + ' ' + props.unit}</Heading>\n    </Box>\n  );\n};\n\nexport default WeatherParameterText;\n","import React from 'react';\nimport { CurrentWeather } from '../../api/interfaces/current-weather';\nimport { Box } from 'grommet';\nimport WeatherParameterText from '../weather-parameter-text/WeatherParameterText';\n\nexport interface CurrentWeatherCardProps {\n  currentWeather: CurrentWeather;\n}\n\nexport const CurrentWeatherCard: React.FC<CurrentWeatherCardProps> = (\n  props: CurrentWeatherCardProps\n) => {\n  return (\n    <div>\n      {!props.currentWeather.weatherParameters && <div>No data</div>}\n      {props.currentWeather.weatherParameters && (\n        <>\n          <h3>Current weather</h3>\n          <Box\n            align=\"center\"\n            justify=\"around\"\n            pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n            elevation=\"large\"\n          >\n            <WeatherParameterText\n              parameterValue={\n                props.currentWeather.weatherParameters.temperature\n              }\n              unit=\"K\"\n              label=\"Temperature:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.currentWeather.weatherParameters.pressure}\n              unit=\"hPa\"\n              label=\"Pressure:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.currentWeather.weatherParameters.humidity}\n              unit=\"%\"\n              label=\"Humidity:\"\n            />\n            <WeatherParameterText\n              parameterValue={\n                props.currentWeather.weatherParameters.maxTemperature\n              }\n              unit=\"K\"\n              label=\"Max temperature:\"\n            />\n            <WeatherParameterText\n              parameterValue={\n                props.currentWeather.weatherParameters.minTemperature\n              }\n              unit=\"K\"\n              label=\"Min. temperature:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.currentWeather.weatherParameters.cloudiness}\n              unit=\"%\"\n              label=\"Cloudiness:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.currentWeather.weatherParameters.windSpeed}\n              unit=\"km/h\"\n              label=\"Wind speed:\"\n            />\n            <WeatherParameterText\n              parameterValue={\n                props.currentWeather.weatherParameters.windDirection\n              }\n              unit=\"km/h\"\n              label=\"Wind direction:\"\n            />\n            <pre>{JSON.stringify(props.currentWeather, null, 2)}</pre>\n          </Box>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { getCurrentWeather } from '../../api/clients/current-weather';\nimport { CurrentWeather } from '../../api/interfaces/current-weather';\nimport { useAppState } from '../../contexts/appContext';\nimport { CurrentWeatherCard } from './CurrentWeatherCard';\n\nexport const CurrentWeatherComponent: React.FC = () => {\n  const [weather, setWeather] = useState({} as CurrentWeather);\n  const { appId, cityName } = useAppState();\n\n  useEffect(() => {\n    if (cityName.length > 3) {\n      getCurrentWeather({ q: cityName, appId }).then(setWeather);\n    }\n  }, [appId, cityName]);\n\n  return <CurrentWeatherCard currentWeather={weather} />;\n};\n","import { FiveDayForecast } from '../interfaces/five-day-forecast';\nimport { Forecast } from '../interfaces/forecast';\nimport { genericParse } from './generic.parser';\n\nexport const fiveDayForecastFieldMap = {\n  'city.coord.lon': 'coordinates.longitude',\n  'city.coord.lat': 'coordinates.latitude',\n  'city.country': 'country',\n  'city.name': 'name',\n};\n\nexport const forecastFieldMap = {\n  'weather': 'weatherConditions',\n  'main.temp': 'weatherParameters.temperature',\n  'main.pressure': 'weatherParameters.pressure',\n  'main.humidity': 'weatherParameters.humidity',\n  'main.temp_min': 'weatherParameters.minTemperature',\n  'main.temp_max': 'weatherParameters.maxTemperature',\n  'main.sea_level': 'weatherParameters.pressureAtSeaLevel',\n  'main.grnd_level': 'weatherParameters.pressureAtGroundLevel',\n  'wind.speed': 'weatherParameters.windSpeed',\n  'wind.deg': 'weatherParameters.windDirection',\n  'clouds.all': 'weatherParameters.cloudiness',\n  'rain.3h': 'weatherParameters.rainInLastThreeHours',\n  'snow.3h': 'weatherParameters.snowInLastThreeHours',\n  'dt': 'time',\n  'dt_txt': 'calculationTime',\n};\n\nexport const parseFiveDayForecast = (apiJson: any): FiveDayForecast => {\n  const parse = genericParse<FiveDayForecast>(apiJson, fiveDayForecastFieldMap);\n  parse.forecasts = apiJson['list'].map(parseForecast);\n  return parse;\n};\n\nexport const parseForecast = (apiJson: any): Forecast =>\n  genericParse<Forecast>(apiJson, forecastFieldMap);\n","import { FiveDayForecast } from '../interfaces/five-day-forecast';\nimport { SearchParameters } from '../interfaces/search-parameters';\nimport { get } from './base';\nimport { parseFiveDayForecast } from '../parsers/five-day-forecast.parser';\n\nexport const getFiveDayForecast = async (\n  params: SearchParameters\n): Promise<FiveDayForecast> => {\n  const data = await get<FiveDayForecast>('forecast', { params });\n  return parseFiveDayForecast(data);\n};\n","import React from 'react';\nimport { Forecast } from '../../api/interfaces/forecast';\nimport { Box } from 'grommet';\nimport WeatherParameterText from '../weather-parameter-text/WeatherParameterText';\n\nexport interface ForecastCardProps {\n  forecast: Forecast;\n}\n\nexport const ForecastCard: React.FC<ForecastCardProps> = (\n  props: ForecastCardProps\n) => {\n  return (\n    <div>\n      {!props.forecast.weatherParameters && <div>No data</div>}\n      {props.forecast.weatherParameters && (\n        <>\n          <h3>Forecast</h3>\n          <Box\n            align=\"center\"\n            justify=\"around\"\n            pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n            elevation=\"large\"\n          >\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.temperature}\n              unit=\"K\"\n              label=\"Temperature:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.pressure}\n              unit=\"hPa\"\n              label=\"Pressure:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.humidity}\n              unit=\"%\"\n              label=\"Humidity:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.maxTemperature}\n              unit=\"K\"\n              label=\"Max temperature:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.minTemperature}\n              unit=\"K\"\n              label=\"Min. temperature:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.cloudiness}\n              unit=\"%\"\n              label=\"Cloudiness:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.windSpeed}\n              unit=\"km/h\"\n              label=\"Wind speed:\"\n            />\n            <WeatherParameterText\n              parameterValue={props.forecast.weatherParameters.windDirection}\n              unit=\"km/h\"\n              label=\"Wind direction:\"\n            />\n            <pre>{JSON.stringify(props.forecast, null, 2)}</pre>\n          </Box>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { getFiveDayForecast } from '../../api/clients/five-day-forecast';\nimport { FiveDayForecast } from '../../api/interfaces/five-day-forecast';\nimport { useAppState } from '../../contexts/appContext';\nimport { ForecastCard } from './ForecastCard';\nimport { Box } from 'grommet';\n\nexport const FiveDayForecastComponent: React.FC = () => {\n  const [forecast, setForecast] = useState({} as FiveDayForecast);\n  const { appId, cityName } = useAppState();\n\n  useEffect(() => {\n    if (cityName.length > 3) {\n      getFiveDayForecast({ q: cityName, appId }).then(setForecast);\n    }\n  }, [appId, cityName]);\n\n  return (\n    <Box direction=\"row\" align=\"center\" justify=\"around\" wrap={true}>\n      {forecast &&\n        forecast.forecasts &&\n        forecast.forecasts.map((f, idx) => (\n          <ForecastCard key={idx} forecast={f} />\n        ))}\n      {!forecast.forecasts && <span>No forecasts</span>}\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Header } from '../header/Header';\nimport { CurrentWeatherComponent } from '../current-weather/CurrentWeatherComponent';\nimport { FiveDayForecastComponent } from '../forecast/FiveDayForecastComponent';\nimport { Box } from 'grommet';\n\nexport const Home: React.FC = () => {\n  return (\n    <div className=\"Home\">\n      <Header />\n      <Box direction=\"row\" align=\"start\" justify=\"around\">\n        <CurrentWeatherComponent />\n      </Box>\n      <Box direction=\"row\" align=\"start\" justify=\"around\">\n        <FiveDayForecastComponent />\n      </Box>\n    </div>\n  );\n};\n","export const theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n","import React from 'react';\nimport './App.css';\nimport { AppContextProvider } from '../../contexts/appContext';\nimport { Home } from '../../components/home/Home';\nimport { Grommet, Box } from 'grommet';\nimport { theme } from '../../styles/theme';\n\nconst App: React.FC = () => {\n  return (\n    <AppContextProvider>\n      <Grommet theme={theme} full>\n        <Box fill>\n          <Home />\n        </Box>\n      </Grommet>\n    </AppContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => console.log(\"ServiceWorker Warning: \", error));\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}