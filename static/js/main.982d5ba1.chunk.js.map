{"version":3,"sources":["common/components/layout/Header.tsx","theme/theme.ts","common/components/layout/Content.tsx","common/components/layout/AppGridContainer.tsx","common/components/layout/Sidebar.tsx","common/api/clients/base.ts","common/api/parsers/generic.parser.ts","common/api/parsers/weather.parser.ts","common/api/clients/weather.ts","app/hooks.ts","common/constants/localStorage.ts","features/api-data/apiDataSlice.ts","features/current-weather/currentWeatherSlice.ts","common/components/icon/WeatherIcon.tsx","common/components/WeatherIconLabel.tsx","common/utils/to-locale-time.ts","features/current-weather/CurrentWeather.tsx","features/current-weather/WeatherFetcher.tsx","common/components/Button.tsx","common/components/Input.tsx","features/api-data/ApiKeyView.tsx","features/api-data/CityInput.tsx","common/api/parsers/five-day-forecast.parser.ts","common/api/clients/five-day-forecast.ts","features/five-day-forecast/fiveDayForecastSlice.ts","features/five-day-forecast/ForecastCard.tsx","features/five-day-forecast/LineChart.tsx","features/five-day-forecast/utils/to-chart-data.ts","features/five-day-forecast/FiveDayForecastDashboard.tsx","features/five-day-forecast/FiveDayForecastFetcher.tsx","App.tsx","reportWebVitals.ts","app/local-storage.middleware.ts","app/store.ts","index.tsx"],"names":["InnerHeader","styled","div","Header","children","theme","color","primaryBackground","secondaryBackground","primaryText","secondaryText","primaryAccent","secondaryAccent","ContentContainer","Content","AppGridContainer","SidebarContainer","props","Sidebar","axiosInstance","axios","create","baseURL","timeout","headers","Accept","get","url","config","then","response","data","catch","reason","console","log","Promise","reject","genericParse","apiJson","fieldMap","Object","keys","reduce","result","key","apiValue","inObject","path","pathParts","split","subObject","i","length","elem","hasOwnProperty","findValueByPath","value","setValueByPath","currentWeatherFieldMap","weather","visibility","name","dt","timezone","getWeather","params","a","units","useAppDispatch","useDispatch","useAppSelector","useSelector","API_KEY","initialState","city","apiKey","localStorage","getItem","apiDataSlice","createSlice","reducers","changeCity","state","action","payload","changeApiKey","resetCity","resetApiKey","selectApiKey","apiData","selectCity","actions","undefined","currentWeatherSlice","changeWeather","selectWeather","currentWeather","selectCoordinates","coordinates","IconDiv","margin","css","size","getWeatherIcon","nameFromApi","WeatherIcon","icon","createElement","WiIcons","Span","span","Label","text","unit","toLocalTime","secondsSinceEpoch","timezoneSeconds","includeSeconds","isoDate","toIsoDate","regex","match","Date","toISOString","Row","flex","TextLabel","fontSize","CurrentWeather","weatherConditions","description","country","Math","round","weatherParameters","temperature","feelsLike","WeatherIconLabel","pressure","humidity","sunrise","sunset","cloudiness","rainInLastHour","snowInLastHour","windDirection","windSpeed","WeatherFetcher","appId","dispatch","useEffect","q","w","Button","button","Input","input","ViewContainer","Box","ApiKeyView","useState","setApiKey","setCity","onInputChange","callback","e","currentTarget","style","width","defaultValue","onChange","placeholder","onClick","CityInput","onKeyPress","fiveDayForecastFieldMap","lon","lat","timezone_offset","forecastFieldMap","speed","deg","clouds","rain","snow","pop","moonrise","moonset","parseFiveDayForecast","parse","forecasts","map","parseForecast","getFiveDayForecast","exclude","forecast","fiveDayForecastSlice","changeForecast","selectForecast","fiveDayForecast","Container","ForecastCard","time","toLocaleDateString","weekday","LineChart","top","right","bottom","left","xScale","type","yScale","min","max","reverse","yFormat","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","pointBorderWidth","pointBorderColor","from","useMesh","curve","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","roundToDecimal","toChartData","acc","f","forecastDay","join","toCalendarDate","addData","x","y","real","day","night","initialChartData","id","point","serie","find","d","push","DashboardContainer","CardContainer","ChartContainer","FiveDayForecastDashboard","slice","FiveDayForecastFetcher","latitude","longitude","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","localStorageMiddleware","store","next","setItem","configureStore","reducer","currentWeatherReducer","apiDataReducer","fiveDayForecastReducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.982d5ba1.chunk.js","sourcesContent":["import { PropsWithChildren } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst InnerHeader = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: transparent;\n  height: 100%;\n  grid-area: header;\n`;\n\nconst Header = ({ children }: PropsWithChildren<{}>) => {\n  return <InnerHeader>{children}</InnerHeader>;\n};\n\nexport default Header;\n","import { Theme } from \"@emotion/react\";\n\nexport const theme: Theme = {\n  color: {\n    primaryBackground: \"#fef9f8\",\n    secondaryBackground: \"#ef9273\",\n    primaryText: \"#0d0d0d\",\n    secondaryText: \"#ffffff\",\n    primaryAccent: \"#CACACA\",\n    secondaryAccent: \"#141519\",\n  },\n};\n","import styled from \"@emotion/styled\";\nimport { PropsWithChildren } from \"react\";\n\nconst ContentContainer = styled.div`\n  grid-area: content;\n  padding: 20px 40px;\n  border-radius: 1em;\n`;\n\nconst Content = ({ children }: PropsWithChildren<{}>) => {\n  return <ContentContainer>{children}</ContentContainer>;\n};\n\nexport default Content;\n","import styled from \"@emotion/styled\";\n\nconst AppGridContainer = styled.div`\n  min-height: 100vh;\n  max-width: 100vw;\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: 64px 1fr;\n  gap: 0px 0px;\n  grid-template-areas:\n    \"sidebar header\"\n    \"sidebar content\";\n  background-color: #f4f4f4;\n`;\n\nexport default AppGridContainer;\n","import styled from \"@emotion/styled\";\nimport { PropsWithChildren } from \"react\";\n\nconst SidebarContainer = styled.div`\n  grid-area: sidebar;\n  background-color: ${(props) => props.theme.color.secondaryBackground};\n  color: ${(props) => props.theme.color.secondaryText};\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  align-items: stretch;\n  justify-content: space-between;\n`;\n\nconst Sidebar = ({ children }: PropsWithChildren<{}>) => {\n  return <SidebarContainer>{children}</SidebarContainer>;\n};\n\nexport default Sidebar;\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\n\nexport const axiosInstance: AxiosInstance = axios.create({\n  baseURL: \"https://api.openweathermap.org/data/2.5/\",\n  timeout: 10000,\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport const get = <T = any>(\n  url: string,\n  config?: AxiosRequestConfig\n): Promise<T> => {\n  return axiosInstance\n    .get(url, config)\n    .then((response: AxiosResponse<T>) => response.data)\n    .catch((reason) => {\n      console.log(reason);\n      //Show error in UI\n      return Promise.reject(reason);\n    });\n};\n","const findValueByPath = (inObject: any, path: string): any => {\n  const pathParts = path.split(\".\");\n  let subObject = inObject;\n  for (let i = 0; i < pathParts.length - 1; i++) {\n    const elem = pathParts[i];\n    if (!subObject || !subObject.hasOwnProperty(elem)) {\n      return undefined;\n    }\n    subObject = subObject[elem];\n  }\n  return subObject[pathParts[pathParts.length - 1]];\n};\n\nconst setValueByPath = (inObject: any, path: string, value: any): any => {\n  let subObject = inObject;\n  const pathParts = path.split(\".\");\n  for (let i = 0; i < pathParts.length - 1; i++) {\n    const elem = pathParts[i];\n    if (!subObject.hasOwnProperty(elem)) {\n      subObject[elem] = {};\n    }\n    subObject = subObject[elem];\n  }\n\n  subObject[pathParts[pathParts.length - 1]] = value;\n};\n\n/**\n * Maybe we should use Map<string,string> for fieldMap, but it requires tweaking the compiler\n * for ES5 compatibility.\n */\nexport const genericParse = <T = any>(apiJson: any, fieldMap: any): T => {\n  return Object.keys(fieldMap).reduce((result: T, key: string) => {\n    const apiValue = findValueByPath(apiJson, key);\n    if (apiValue) {\n      setValueByPath(result, fieldMap[key], apiValue);\n    }\n    return result;\n  }, {} as T);\n};\n","import { Weather } from \"../interfaces/weather\";\nimport { genericParse } from \"./generic.parser\";\n\nexport const currentWeatherFieldMap = {\n  \"coord.lon\": \"coordinates.longitude\",\n  \"coord.lat\": \"coordinates.latitude\",\n  weather: \"weatherConditions\",\n  \"main.temp\": \"weatherParameters.temperature\",\n  \"main.feels_like\": \"weatherParameters.feelsLike\",\n  \"main.pressure\": \"weatherParameters.pressure\",\n  \"main.humidity\": \"weatherParameters.humidity\",\n  \"main.temp_min\": \"weatherParameters.minTemperature\",\n  \"main.temp_max\": \"weatherParameters.maxTemperature\",\n  \"main.sea_level\": \"weatherParameters.pressureAtSeaLevel\",\n  \"main.grnd_level\": \"weatherParameters.pressureAtGroundLevel\",\n  visibility: \"visibility\",\n  \"wind.speed\": \"weatherParameters.windSpeed\",\n  \"wind.deg\": \"weatherParameters.windDirection\",\n  \"clouds.all\": \"weatherParameters.cloudiness\",\n  \"rain.1h\": \"weatherParameters.rainInLastHour\",\n  \"rain.3h\": \"weatherParameters.rainInLastThreeHours\",\n  \"snow.1h\": \"weatherParameters.snowInLastHour\",\n  \"snow.3h\": \"weatherParameters.snowInLastThreeHours\",\n  name: \"name\",\n  dt: \"time\",\n  timezone: \"timezone\",\n  \"sys.sunrise\": \"sunrise\",\n  \"sys.sunset\": \"sunset\",\n  \"sys.country\": \"country\",\n};\n\nexport const parseCurrentWeather = (apiJson: Object): Weather =>\n  genericParse<Weather>(apiJson, currentWeatherFieldMap);\n","import { Weather } from \"../interfaces/weather\";\nimport { SearchParameters } from \"../interfaces/search-parameters\";\nimport { get } from \"./base\";\nimport { parseCurrentWeather } from \"../parsers/weather.parser\";\n\nexport const getWeather = async (\n  params: SearchParameters\n): Promise<Weather> => {\n  const data = await get(\"weather\", {\n    params: {\n      units: \"metric\",\n      ...params,\n    },\n  });\n  return parseCurrentWeather(data);\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const API_KEY = \"openweather-apikey\";\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { API_KEY } from \"../../common/constants/localStorage\";\n\ninterface ApiDataState {\n  city: string;\n  apiKey: string;\n}\n\nconst initialState: ApiDataState = {\n  city: \"\",\n  apiKey: localStorage.getItem(API_KEY) || \"\",\n};\n\nexport const apiDataSlice = createSlice({\n  name: \"apiData\",\n  initialState,\n  reducers: {\n    changeCity: (state: ApiDataState, action: PayloadAction<string>) => {\n      state.city = action.payload;\n    },\n    changeApiKey: (state: ApiDataState, action: PayloadAction<string>) => {\n      state.apiKey = action.payload;\n    },\n    resetCity: (state: ApiDataState) => {\n      state.city = \"\";\n    },\n    resetApiKey: (state: ApiDataState) => {\n      state.apiKey = \"\";\n    },\n  },\n});\n\nexport const selectApiKey = (state: RootState) => state.apiData.apiKey;\nexport const selectCity = (state: RootState) => state.apiData.city;\n\nexport const { changeCity, changeApiKey, resetCity, resetApiKey } =\n  apiDataSlice.actions;\n\nexport default apiDataSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Coordinates } from \"../../common/api/interfaces/coordinates\";\nimport { Weather } from \"../../common/api/interfaces/weather\";\n\ninterface CurrentWeatherState {\n  weather: Weather | undefined;\n}\n\nconst initialState: CurrentWeatherState = {\n  weather: undefined,\n};\n\nexport const currentWeatherSlice = createSlice({\n  name: \"currentWeather\",\n  initialState,\n  reducers: {\n    changeWeather: (\n      state: CurrentWeatherState,\n      action: PayloadAction<Weather>\n    ) => {\n      state.weather = action.payload;\n    },\n  },\n});\n\nexport const selectWeather = (state: RootState) => state.currentWeather.weather;\n\nexport const selectCoordinates = (state: RootState): Coordinates | undefined =>\n  state.currentWeather.weather?.coordinates;\n\nexport const { changeWeather } = currentWeatherSlice.actions;\n\nexport default currentWeatherSlice.reducer;\n","import styled from \"@emotion/styled\";\nimport * as WiIcons from \"react-icons/wi\";\nimport { css } from \"@emotion/react\";\nimport { createElement } from \"react\";\n\nexport type IconName = keyof typeof WiIcons;\n\nexport interface IconProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  name: IconName;\n  margin?: string;\n  size?: string | number;\n  color?: string;\n}\n\nconst marginForIcon = ({ margin }: IconProps) =>\n  margin\n    ? css`\n        margin: ${margin};\n      `\n    : css``;\n\nconst IconDiv = styled.div<IconProps>`\n  ${marginForIcon}\n  font-size: ${({ size }) => size || \"1em\"};\n  height: 1em;\n  color: ${({ color, theme }) => color || theme.color.primaryText};\n`;\n\nconst WeatherIcon = (props: IconProps) => {\n  const icon = createElement(WiIcons[props.name]);\n  return <IconDiv {...props}>{icon}</IconDiv>;\n};\n\nexport const getWeatherIcon = (nameFromApi: string): IconName => {\n  const codesToIcon: { [key: string]: IconName } = {\n    \"01d\": \"WiDaySunny\",\n    \"01n\": \"WiNightClear\",\n    \"02d\": \"WiDayCloudy\",\n    \"02n\": \"WiNightCloudy\",\n    \"03d\": \"WiDayCloudy\",\n    \"03n\": \"WiNightCloudy\",\n    \"04d\": \"WiCloudy\",\n    \"04n\": \"WiCloudy\",\n    \"09d\": \"WiRain\",\n    \"09n\": \"WiRain\",\n    \"10d\": \"WiDayRain\",\n    \"10n\": \"WiNightRain\",\n    \"11d\": \"WiThunderstorm\",\n    \"11n\": \"WiThunderstorm\",\n    \"13d\": \"WiSnow\",\n    \"13n\": \"WiSnow\",\n    \"50d\": \"WiDayFog\",\n    \"50n\": \"WiNightFog\",\n  };\n  return codesToIcon[nameFromApi];\n};\n\nexport default WeatherIcon;\n","import styled from \"@emotion/styled\";\nimport WeatherIcon, { IconName } from \"./icon/WeatherIcon\";\n\ninterface LabelProps {\n  name: IconName;\n  text: number | string;\n  unit?: string;\n}\n\nconst Span = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n`;\n\nconst Label = ({ name, text, unit }: LabelProps) => {\n  return (\n    <Span>\n      <WeatherIcon name={name} size=\"2em\" />\n      {`${text} ${unit ?? \"\"}`}\n    </Span>\n  );\n};\n\nexport default Label;\n","export const toLocalTime = (\n  secondsSinceEpoch: number,\n  timezoneSeconds: number | undefined,\n  includeSeconds: boolean = false\n): string => {\n  const isoDate = toIsoDate(secondsSinceEpoch, timezoneSeconds);\n  const regex = includeSeconds\n    ? /[0-2]\\d:[0-5]\\d:?([0-5]\\d)/\n    : /[0-2]\\d:[0-5]\\d/;\n  return isoDate.match(regex)?.[0] ?? \"N/A\";\n};\n\nexport const toCalendarDate = (\n  secondsSinceEpoch: number,\n  timezoneSeconds: number | undefined\n): string => {\n  const isoDate = toIsoDate(secondsSinceEpoch, timezoneSeconds);\n  return (\n    isoDate\n      .match(/\\d{4}-\\d{2}-\\d{2}/)?.[0]\n      .split(\"-\")\n      .reverse()\n      .join(\"-\") ?? \"N/A\"\n  );\n};\n\nexport const toWeekDay = (\n  secondsSinceEpoch: number,\n  timezoneSeconds: number | undefined\n): string => {\n  const date = new Date(\n    1000 * (secondsSinceEpoch + (timezoneSeconds ? timezoneSeconds : 0))\n  );\n  return date.toLocaleDateString(\"en-US\", { weekday: \"long\" });\n};\n\nconst toIsoDate = (\n  secondsSinceEpoch: number,\n  timezoneSeconds: number | undefined\n): string =>\n  new Date(\n    1000 * (secondsSinceEpoch + (timezoneSeconds ? timezoneSeconds : 0))\n  ).toISOString();\n","import styled from \"@emotion/styled\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectWeather } from \"./currentWeatherSlice\";\nimport WeatherIconLabel from \"../../common/components/WeatherIconLabel\";\nimport { toLocalTime } from \"../../common/utils/to-locale-time\";\nimport WeatherIcon, {\n  getWeatherIcon,\n} from \"../../common/components/icon/WeatherIcon\";\n\ninterface RowProps {\n  flex?: string;\n}\n\nconst Row = styled.div<RowProps>`\n  flex: ${(props) => (props.flex ? props.flex : 1)};\n  display: flex;\n  justify-content: space-around;\n`;\n\ninterface TextLabelProps {\n  fontSize?: string;\n}\n\nconst TextLabel = styled.span<TextLabelProps>`\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"1em\")};\n`;\n\nconst CurrentWeather = () => {\n  const weather = useAppSelector(selectWeather);\n  return (\n    <>\n      {!!weather && (\n        <>\n          <Row>\n            <TextLabel fontSize=\"4em\">\n              <WeatherIcon\n                name={getWeatherIcon(weather.weatherConditions[0].icon)}\n                size=\"2em\"\n              />\n            </TextLabel>\n          </Row>\n          <Row>\n            <TextLabel fontSize=\"1em\">\n              {`${weather.weatherConditions[0].description}`}\n            </TextLabel>\n          </Row>\n          <Row>\n            <TextLabel fontSize=\"2em\">\n              {`${weather.name}, ${weather.country}`}\n            </TextLabel>\n          </Row>\n          <Row>\n            <TextLabel fontSize=\"4em\">\n              {`${Math.round(weather.weatherParameters.temperature)} ºC`}\n            </TextLabel>\n          </Row>\n          <Row>\n            <TextLabel>\n              {`Feels like: ${Math.round(\n                weather.weatherParameters.feelsLike\n              )} ºC`}\n            </TextLabel>\n          </Row>\n          <Row>\n            <WeatherIconLabel\n              name=\"WiBarometer\"\n              text={weather.weatherParameters.pressure}\n              unit=\"hPa\"\n            />\n            <WeatherIconLabel\n              name=\"WiHumidity\"\n              text={weather.weatherParameters.humidity}\n              unit=\"%\"\n            />\n          </Row>\n          <Row>\n            <WeatherIconLabel\n              name=\"WiSunrise\"\n              text={toLocalTime(weather.sunrise, weather.timezone)}\n              unit=\"h\"\n            />\n            <WeatherIconLabel\n              name=\"WiSunset\"\n              text={toLocalTime(weather.sunset, weather.timezone)}\n              unit=\"h\"\n            />\n          </Row>\n          <Row>\n            <WeatherIconLabel\n              name=\"WiCloudy\"\n              text={weather.weatherParameters.cloudiness || 0}\n              unit=\"%\"\n            />\n            {weather.weatherParameters.rainInLastHour && (\n              <WeatherIconLabel\n                name=\"WiRaindrops\"\n                text={weather.weatherParameters.rainInLastHour}\n                unit=\"h\"\n              />\n            )}\n            {weather.weatherParameters.snowInLastHour && (\n              <WeatherIconLabel\n                name=\"WiSnow\"\n                text={weather.weatherParameters.snowInLastHour}\n                unit=\"h\"\n              />\n            )}\n          </Row>\n          <Row>\n            <WeatherIconLabel\n              name=\"WiWindDeg\"\n              text={weather.weatherParameters.windDirection}\n              unit=\"º\"\n            />\n            <WeatherIconLabel\n              name=\"WiStrongWind\"\n              text={weather.weatherParameters.windSpeed}\n              unit=\"m/s\"\n            />\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CurrentWeather;\n","import { useEffect } from \"react\";\nimport { getWeather } from \"../../common/api/clients/weather\";\nimport { Weather } from \"../../common/api/interfaces/weather\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { selectApiKey, selectCity } from \"../../features/api-data/apiDataSlice\";\nimport { changeWeather } from \"./currentWeatherSlice\";\nimport CurrentWeather from \"./CurrentWeather\";\n\nconst WeatherFetcher = () => {\n  const city = useAppSelector(selectCity);\n  const appId = useAppSelector(selectApiKey);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (city?.length > 0 && appId?.length > 0) {\n      getWeather({ q: city, appId }).then((w: Weather) =>\n        dispatch(changeWeather(w))\n      );\n    }\n  }, [appId, city, dispatch]);\n\n  return <CurrentWeather />;\n};\n\nexport default WeatherFetcher;\n","import styled from \"@emotion/styled\";\n\nconst Button = styled.button`\n  color: ${({ theme }) => theme.color.secondaryText};\n  background: ${({ theme }) => theme.color.primaryAccent} none repeat scroll 0%\n    0%;\n  padding: 11px;\n  font-weight: 600;\n  margin: 0px;\n  border-radius: 1em;\n  border: 0px;\n`;\n\nexport default Button;\n","import styled from \"@emotion/styled\";\n\nconst Input = styled.input`\n  color: ${({ theme }) => theme.color.secondaryText};\n  background: ${({ theme }) => theme.color.primaryAccent} none repeat scroll 0%\n    0%;\n  padding: 11px;\n  font-weight: 600;\n  margin: 0px;\n  border-radius: 1em;\n  border: 0px;\n`;\n\nexport default Input;\n","import styled from \"@emotion/styled\";\nimport { ChangeEvent, useState } from \"react\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport Button from \"../../common/components/Button\";\nimport Input from \"../../common/components/Input\";\nimport { changeApiKey, changeCity } from \"./apiDataSlice\";\n\nconst ViewContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  justify-content: center;\n  color: ${(props) => props.theme.color.primaryText};\n  background: ${(props) => props.theme.color.primaryBackground};\n  background: linear-gradient(\n    90deg,\n    ${(props) => props.theme.color.secondaryBackground} 18%,\n    ${(props) => props.theme.color.primaryBackground} 100%\n  );\n`;\n\nconst Box = styled.div`\n  min-width: 300px;\n  min-height: 250px;\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n  justify-content: space-around;\n  padding: 20px;\n`;\n\nconst ApiKeyView = () => {\n  const dispatch = useAppDispatch();\n  const [apiKey, setApiKey] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const onInputChange = (callback: (value: string) => void) => {\n    return (e: ChangeEvent<HTMLInputElement>) => {\n      callback(e.currentTarget.value);\n    };\n  };\n  const fillData = () => {\n    if (apiKey !== \"\") {\n      dispatch(changeCity(city));\n      dispatch(changeApiKey(apiKey));\n    }\n  };\n  return (\n    <ViewContainer>\n      <Box>\n        <h2>Tramuntana</h2>\n        <Input\n          style={{ width: \"200px\" }}\n          defaultValue={apiKey}\n          onChange={onInputChange(setApiKey)}\n          placeholder=\"Fill with your API key\"\n        />\n        <Input\n          style={{ width: \"200px\" }}\n          defaultValue={city}\n          onChange={onInputChange(setCity)}\n          placeholder=\"Load weather for city?\"\n        />\n        <Button style={{ width: \"222px\" }} onClick={fillData}>\n          Submit\n        </Button>\n      </Box>\n    </ViewContainer>\n  );\n};\n\nexport default ApiKeyView;\n","import Input from \"../../common/components/Input\";\nimport { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { changeCity } from \"./apiDataSlice\";\n\nconst CityInput = () => {\n  const [city, setCity] = useState(\"\");\n  const dispatch = useAppDispatch();\n  const onSearch = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      dispatch(changeCity(city));\n    }\n  };\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setCity(e.currentTarget.value);\n  };\n  return (\n    <Input\n      defaultValue={city}\n      onChange={onInputChange}\n      onKeyPress={onSearch}\n      placeholder=\"City\"\n    />\n  );\n};\n\nexport default CityInput;\n","import { FiveDayForecast } from \"../interfaces/five-day-forecast\";\nimport { Forecast } from \"../interfaces/forecast\";\nimport { genericParse } from \"./generic.parser\";\n\nexport const fiveDayForecastFieldMap = {\n  lon: \"coordinates.longitude\",\n  lat: \"coordinates.latitude\",\n  timezone_offset: \"timezone\",\n};\n\nexport const forecastFieldMap = {\n  weather: \"weatherConditions\",\n  \"temp.min\": \"temperature.real.min\",\n  \"temp.max\": \"temperature.real.max\",\n  \"feels_like.day\": \"temperature.feelsLike.day\",\n  \"feels_like.night\": \"temperature.feelsLike.night\",\n  pressure: \"pressure\",\n  humidity: \"humidity\",\n  speed: \"windSpeed\",\n  deg: \"windDirection\",\n  clouds: \"cloudiness\",\n  rain: \"rain\",\n  snow: \"snow\",\n  pop: \"rainProbability\",\n  sunrise: \"sunrise\",\n  sunset: \"sunset\",\n  moonrise: \"moonrise\",\n  moonset: \"moonset\",\n  dt: \"time\",\n};\n\nexport const parseFiveDayForecast = (apiJson: any): FiveDayForecast => {\n  const parse = genericParse<FiveDayForecast>(apiJson, fiveDayForecastFieldMap);\n  parse.forecasts = apiJson[\"daily\"].map(parseForecast);\n  return parse;\n};\n\nexport const parseForecast = (apiJson: any): Forecast =>\n  genericParse<Forecast>(apiJson, forecastFieldMap);\n","import { FiveDayForecast } from \"../interfaces/five-day-forecast\";\nimport { SearchParameters } from \"../interfaces/search-parameters\";\nimport { get } from \"./base\";\nimport { parseFiveDayForecast } from \"../parsers/five-day-forecast.parser\";\n\nexport const getFiveDayForecast = async (\n  params: SearchParameters\n): Promise<FiveDayForecast> => {\n  const data = await get<FiveDayForecast>(\"onecall\", {\n    params: {\n      units: \"metric\",\n      exclude: \"current,minutely,hourly,alerts\",\n      ...params,\n    },\n  });\n  return parseFiveDayForecast(data);\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { FiveDayForecast } from \"../../common/api/interfaces/five-day-forecast\";\n\ninterface FiveDayForecastState {\n  forecast: FiveDayForecast | undefined;\n}\n\nconst initialState: FiveDayForecastState = {\n  forecast: undefined,\n};\n\nexport const fiveDayForecastSlice = createSlice({\n  name: \"fiveDayForecast\",\n  initialState,\n  reducers: {\n    changeForecast: (\n      state: FiveDayForecastState,\n      action: PayloadAction<FiveDayForecast>\n    ) => {\n      state.forecast = action.payload;\n    },\n  },\n});\n\nexport const selectForecast = (state: RootState) =>\n  state.fiveDayForecast.forecast;\n\nexport const { changeForecast } = fiveDayForecastSlice.actions;\n\nexport default fiveDayForecastSlice.reducer;\n","import styled from \"@emotion/styled\";\nimport { Forecast } from \"../../common/api/interfaces/forecast\";\nimport WeatherIcon, {\n  getWeatherIcon,\n} from \"../../common/components/icon/WeatherIcon\";\nimport WeatherIconLabel from \"../../common/components/WeatherIconLabel\";\nimport { toLocalTime, toWeekDay } from \"../../common/utils/to-locale-time\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 1px solid ${({ theme }) => theme.color.secondaryBackground};\n  border-radius: 10px;\n  padding: 5px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n`;\n\ninterface ForecastCardProps {\n  data: Forecast;\n  timezone: number;\n}\n\nconst ForecastCard = ({ data, timezone }: ForecastCardProps) => {\n  return (\n    <Container>\n      <Row>\n        <span>{toWeekDay(data.time, timezone)}</span>\n      </Row>\n      <Row>\n        <WeatherIcon\n          name={getWeatherIcon(data.weatherConditions[0].icon)}\n          size=\"4em\"\n        />\n      </Row>\n      <Row>\n        <WeatherIconLabel name=\"WiBarometer\" text={data.pressure} unit=\"hPa\" />\n        <WeatherIconLabel name=\"WiHumidity\" text={data.humidity} unit=\"%\" />\n      </Row>\n      <Row>\n        <WeatherIconLabel\n          name=\"WiSunrise\"\n          text={toLocalTime(data.sunrise, timezone)}\n        />\n        <WeatherIconLabel\n          name=\"WiSunset\"\n          text={toLocalTime(data.sunset, timezone)}\n        />\n      </Row>\n    </Container>\n  );\n};\n\nexport default ForecastCard;\n","import { ResponsiveLine } from \"@nivo/line\";\n\ninterface LineChartProps {\n  data: LineChartData[];\n}\n\nexport interface LineChartData {\n  id: string;\n  color: string;\n  data: DataPoint[];\n}\n\nexport interface DataPoint {\n  y: any;\n  x: any;\n}\n\nconst LineChart = ({ data }: LineChartProps) => (\n  <ResponsiveLine\n    data={data}\n    margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n    xScale={{ type: \"point\" }}\n    yScale={{\n      type: \"linear\",\n      min: \"auto\",\n      max: \"auto\",\n      reverse: false,\n    }}\n    yFormat=\" >-.1f\"\n    axisTop={null}\n    axisRight={null}\n    axisBottom={{\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: \"Day\",\n      legendOffset: 36,\n      legendPosition: \"middle\",\n    }}\n    axisLeft={{\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: \"Degrees (ºC)\",\n      legendOffset: -30,\n      legendPosition: \"middle\",\n    }}\n    pointSize={10}\n    pointColor={{ theme: \"background\" }}\n    pointBorderWidth={2}\n    pointBorderColor={{ from: \"serieColor\" }}\n    useMesh={true}\n    curve=\"natural\"\n    legends={[\n      {\n        anchor: \"bottom-right\",\n        direction: \"column\",\n        justify: false,\n        translateX: 105,\n        translateY: 0,\n        itemsSpacing: 0,\n        itemDirection: \"left-to-right\",\n        itemWidth: 100,\n        itemHeight: 20,\n        itemOpacity: 0.75,\n        symbolSize: 8,\n        symbolShape: \"circle\",\n        symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n        effects: [\n          {\n            on: \"hover\",\n            style: {\n              itemBackground: \"rgba(0, 0, 0, .03)\",\n              itemOpacity: 1,\n            },\n          },\n        ],\n      },\n    ]}\n  />\n);\n\nexport default LineChart;\n","import { FiveDayForecast } from \"../../../common/api/interfaces/five-day-forecast\";\nimport { toCalendarDate } from \"../../../common/utils/to-locale-time\";\nimport { DataPoint, LineChartData } from \"../LineChart\";\n\nconst roundToDecimal = (value: number): number => {\n  console.log(Math.round(value * 10));\n  return Math.round(value * 10) / 10;\n};\n\nexport const toChartData = (\n  fiveDayForecast: FiveDayForecast\n): LineChartData[] => {\n  const { timezone, forecasts } = fiveDayForecast;\n  return forecasts.reduce((acc, f) => {\n    const forecastDay = toCalendarDate(f.time, timezone);\n    addData(acc, \"Max temperature\", {\n      x: forecastDay,\n      y: roundToDecimal(f.temperature.real.max),\n    });\n    addData(acc, \"Min temperature\", {\n      x: forecastDay,\n      y: roundToDecimal(f.temperature.real.min),\n    });\n    addData(acc, \"Feels like day\", {\n      x: forecastDay,\n      y: roundToDecimal(f.temperature.feelsLike.day),\n    });\n    addData(acc, \"Feels like night\", {\n      x: forecastDay,\n      y: roundToDecimal(f.temperature.feelsLike.night),\n    });\n    return acc;\n  }, initialChartData());\n};\n\nconst addData = (data: LineChartData[], id: string, point: DataPoint) => {\n  const serie = data.find((d) => d.id === id);\n  if (!!serie) {\n    serie.data.push(point);\n  }\n};\n\nconst initialChartData = (): LineChartData[] => {\n  return [\n    {\n      id: \"Max temperature\",\n      color: \"hsl(194, 70%, 50%)\",\n      data: [],\n    },\n    {\n      id: \"Min temperature\",\n      color: \"hsl(5, 70%, 50%)\",\n      data: [],\n    },\n    {\n      id: \"Feels like day\",\n      color: \"#FF5733\",\n      data: [],\n    },\n    {\n      id: \"Feels like night\",\n      color: \"#581845\",\n      data: [],\n    },\n  ];\n};\n","import styled from \"@emotion/styled\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectForecast } from \"./fiveDayForecastSlice\";\nimport ForecastCard from \"./ForecastCard\";\nimport LineChart from \"./LineChart\";\nimport { toChartData } from \"./utils/to-chart-data\";\n\nconst DashboardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  overflow-y: auto;\n  height: 100%;\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: start;\n`;\n\nconst ChartContainer = styled.div`\n  min-height: 350px;\n  height: 0.5vh;\n  width: auto;\n`;\n\nconst FiveDayForecastDashboard = () => {\n  const fiveDayForecast = useAppSelector(selectForecast);\n  return (\n    <>\n      {!!fiveDayForecast ? (\n        <DashboardContainer>\n          <CardContainer>\n            {fiveDayForecast.forecasts.slice(1, 6).map((f, i) => (\n              <ForecastCard\n                key={i}\n                data={f}\n                timezone={fiveDayForecast.timezone}\n              />\n            ))}\n          </CardContainer>\n          <ChartContainer>\n            <LineChart\n              data={toChartData({\n                ...fiveDayForecast,\n                forecasts: fiveDayForecast.forecasts.slice(1, 6),\n              })}\n            />\n          </ChartContainer>\n        </DashboardContainer>\n      ) : (\n        <div>Please, search for forecasts</div>\n      )}\n    </>\n  );\n};\n\nexport default FiveDayForecastDashboard;\n","import { useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { getFiveDayForecast } from \"../../common/api/clients/five-day-forecast\";\nimport { FiveDayForecast } from \"../../common/api/interfaces/five-day-forecast\";\nimport { selectApiKey } from \"../api-data/apiDataSlice\";\nimport { selectCoordinates } from \"../current-weather/currentWeatherSlice\";\nimport FiveDayForecastDashboard from \"./FiveDayForecastDashboard\";\nimport { changeForecast } from \"./fiveDayForecastSlice\";\n\nconst FiveDayForecastFetcher = () => {\n  const coordinates = useAppSelector(selectCoordinates);\n  const appId = useAppSelector(selectApiKey);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!!coordinates && appId?.length > 0) {\n      getFiveDayForecast({\n        lat: coordinates.latitude,\n        lon: coordinates.longitude,\n        appId,\n      }).then((f: FiveDayForecast) => dispatch(changeForecast(f)));\n    }\n  }, [appId, coordinates, dispatch]);\n\n  return <FiveDayForecastDashboard />;\n};\n\nexport default FiveDayForecastFetcher;\n","import Header from \"./common/components/layout/Header\";\nimport { ThemeProvider } from \"@emotion/react\";\nimport { theme } from \"./theme/theme\";\nimport Content from \"./common/components/layout/Content\";\nimport AppGridContainer from \"./common/components/layout/AppGridContainer\";\nimport Sidebar from \"./common/components/layout/Sidebar\";\nimport WeatherFetcher from \"./features/current-weather/WeatherFetcher\";\nimport { useAppSelector } from \"./app/hooks\";\nimport { selectApiKey } from \"./features/api-data/apiDataSlice\";\nimport ApiKeyView from \"./features/api-data/ApiKeyView\";\nimport CityInput from \"./features/api-data/CityInput\";\nimport FiveDayForecastFetcher from \"./features/five-day-forecast/FiveDayForecastFetcher\";\n\nconst App = () => {\n  const apiKey = useAppSelector(selectApiKey);\n  const hasApiKey = (key: string) => !!key && key !== \"\";\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        {hasApiKey(apiKey) ? (\n          <AppGridContainer>\n            <Header>\n              <CityInput />\n            </Header>\n            <Sidebar>\n              <WeatherFetcher />\n            </Sidebar>\n            <Content>\n              <FiveDayForecastFetcher />\n            </Content>\n          </AppGridContainer>\n        ) : (\n          <ApiKeyView />\n        )}\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { API_KEY } from \"../common/constants/localStorage\";\nimport { changeApiKey } from \"../features/api-data/apiDataSlice\";\n\nexport const localStorageMiddleware =\n  (store: any) => (next: any) => (action: any) => {\n    if (changeApiKey.match(action)) {\n      localStorage.setItem(API_KEY, action.payload);\n    }\n    return next(action);\n  };\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport apiDataReducer from \"../features/api-data/apiDataSlice\";\nimport currentWeatherReducer from \"../features/current-weather/currentWeatherSlice\";\nimport fiveDayForecastReducer from \"../features/five-day-forecast/fiveDayForecastSlice\";\nimport { localStorageMiddleware } from \"./local-storage.middleware\";\n\nconst store = configureStore({\n  reducer: {\n    currentWeather: currentWeatherReducer,\n    apiData: apiDataReducer,\n    fiveDayForecast: fiveDayForecastReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(localStorageMiddleware),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}